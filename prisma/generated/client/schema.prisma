// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projects      Project[]
  expert        Expert?
  consultations Consultation[]
}

model Expert {
  id            String         @id @default(cuid())
  userId        String         @unique
  user          User           @relation(fields: [userId], references: [id])
  bio           String
  expertise     String[]
  hourlyRate    Float
  isAvailable   Boolean        @default(true)
  projects      Project[]
  consultations Consultation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  status      ProjectStatus @default(OPEN)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  expertId    String?
  expert      Expert?       @relation(fields: [expertId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Consultation {
  id        String             @id @default(cuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  expertId  String
  expert    Expert             @relation(fields: [expertId], references: [id])
  status    ConsultationStatus @default(PENDING)
  date      DateTime
  duration  Int // Duration in minutes
  notes     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum Role {
  USER
  EXPERT
  ADMIN
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CLOSED
}

enum ConsultationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
